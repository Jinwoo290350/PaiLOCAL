"""
Trip Narrator Service
Generates human-readable trip summaries and route narratives using LLM.
"""

import logging
from typing import List, Dict, Any
import pandas as pd

logger = logging.getLogger(__name__)


class TripNarrator:
    """Generates narrative descriptions of trips"""

    def __init__(self):
        """Initialize trip narrator"""
        pass

    def generate_trip_summary(
        self,
        places: List[Dict],
        start_location: Dict[str, float],
        total_distance: float,
        total_carbon: float,
        eco_score: float,
        theme: str = None
    ) -> str:
        """
        Generate a narrative summary of the trip.

        Args:
            places: List of place dictionaries
            start_location: Dict with 'lat' and 'lng'
            total_distance: Total distance in km
            total_carbon: Total carbon in kg CO2
            eco_score: Eco score (0-10)
            theme: Theme used for planning (if any)

        Returns:
            Human-readable trip summary
        """
        if not places:
            return "No places found for this trip."

        # Count keywords
        keywords = {}
        for place in places:
            keyword = place.get('keyword', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà')
            keywords[keyword] = keywords.get(keyword, 0) + 1

        keyword_summary = ", ".join([f"{k} {v} ‡πÅ‡∏´‡πà‡∏á" for k, v in keywords.items()])

        # Build narrative
        narrative = []

        # Opening
        if theme:
            narrative.append(f"üåü **‡∏ó‡∏£‡∏¥‡∏õ {theme}** ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß {len(places)} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")
        else:
            narrative.append(f"üåü **‡∏ó‡∏£‡∏¥‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì** ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ {len(places)} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")

        # Place types
        narrative.append(f"   ‡∏£‡∏ß‡∏° {keyword_summary}")
        narrative.append("")

        # Route description
        narrative.append("üìç **‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á:**")

        for i, place in enumerate(places, 1):
            name = place['name']
            keyword = place.get('keyword', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà')
            dist_from_prev = place.get('distance_from_prev_km', 0)
            dist_from_start = place.get('distance_from_start_km', 0)
            rating = place.get('rating', 0)
            carbon = place.get('carbon_footprint_kg', 0)

            # Format rating
            stars = "‚≠ê" * int(rating) if rating else "‚Ä¢"

            if i == 1:
                narrative.append(f"   **{i}. {name}** ({keyword}) - {stars} {rating}/5")
                narrative.append(f"      ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {dist_from_start:.1f} km")
            else:
                narrative.append(f"   **{i}. {name}** ({keyword}) - {stars} {rating}/5")
                narrative.append(f"      ‚Üì ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á {dist_from_prev:.1f} km | ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô {carbon:.2f} kg CO2")

        narrative.append("")

        # Summary stats
        narrative.append("üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏£‡∏¥‡∏õ:**")
        narrative.append(f"   ‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°: **{total_distance:.1f} km**")
        narrative.append(f"   ‚Ä¢ ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡∏ü‡∏∏‡∏ï‡∏û‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡πå: **{total_carbon:.1f} kg CO2**")
        narrative.append(f"   ‚Ä¢ Eco Score: **{eco_score:.1f}/10** {self._get_eco_rating(eco_score)}")

        # Eco recommendation
        if eco_score >= 7:
            narrative.append("")
            narrative.append("‚úÖ **‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°!** ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡∏ï‡πà‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
        elif eco_score >= 5:
            narrative.append("")
            narrative.append("‚ö†Ô∏è  **‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á** ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô")
        else:
            narrative.append("")
            narrative.append("üî¥ **‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡∏™‡∏π‡∏á** ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô")

        return "\n".join(narrative)

    def generate_route_directions(self, places: List[Dict]) -> List[str]:
        """
        Generate step-by-step route directions.

        Args:
            places: List of place dictionaries

        Returns:
            List of direction strings
        """
        directions = []

        for i, place in enumerate(places, 1):
            name = place['name']
            dist_from_prev = place.get('distance_from_prev_km', 0)

            if i == 1:
                directions.append(f"üöó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà **{name}**")
            else:
                direction = self._calculate_direction(
                    places[i-2]['lat'],
                    places[i-2]['lng'],
                    place['lat'],
                    place['lng']
                )
                directions.append(f"üöó ‡∏°‡∏∏‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤{direction} {dist_from_prev:.1f} km ‡πÑ‡∏õ‡∏¢‡∏±‡∏á **{name}**")

        return directions

    def _calculate_direction(self, lat1: float, lng1: float, lat2: float, lng2: float) -> str:
        """Calculate cardinal direction between two points"""
        dlat = lat2 - lat1
        dlng = lng2 - lng1

        # Determine primary direction
        if abs(dlat) > abs(dlng):
            primary = "‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠" if dlat > 0 else "‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ"
        else:
            primary = "‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å" if dlng > 0 else "‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å"

        # Determine secondary direction
        if abs(dlat) > 0.01 and abs(dlng) > 0.01:
            if dlat > 0:
                secondary = "‡πÄ‡∏´‡∏ô‡∏∑‡∏≠" if dlng > 0 else "‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å" if dlng > 0 else "‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å"
            else:
                secondary = "‡πÉ‡∏ï‡πâ"

            # Combine
            if dlat > 0 and dlng > 0:
                return "‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠"
            elif dlat > 0 and dlng < 0:
                return "‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠"
            elif dlat < 0 and dlng > 0:
                return "‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÉ‡∏ï‡πâ"
            else:
                return "‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å‡πÉ‡∏ï‡πâ"

        return primary

    def _get_eco_rating(self, eco_score: float) -> str:
        """Get emoji rating for eco score"""
        if eco_score >= 8:
            return "üåüüåüüåü"
        elif eco_score >= 6:
            return "üåüüåü"
        elif eco_score >= 4:
            return "üåü"
        else:
            return "üí®"

    def generate_compact_summary(
        self,
        places: List[Dict],
        total_distance: float,
        total_carbon: float,
        eco_score: float
    ) -> str:
        """
        Generate a compact one-line summary.

        Args:
            places: List of place dictionaries
            total_distance: Total distance in km
            total_carbon: Total carbon in kg CO2
            eco_score: Eco score (0-10)

        Returns:
            Compact summary string
        """
        if not places:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"

        # Get unique keywords
        keywords = list(set([p.get('keyword', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà') for p in places]))
        keyword_str = keywords[0] if len(keywords) == 1 else f"{len(keywords)} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"

        return f"‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß {len(places)} ‡πÅ‡∏´‡πà‡∏á ({keyword_str}) ‚Ä¢ {total_distance:.0f} km ‚Ä¢ {total_carbon:.0f} kg CO2 ‚Ä¢ Eco {eco_score:.1f}/10"
